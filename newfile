final def page = getPage('/content/waters/language-masters/en/library/application-notes/200')
final def query = buildQuery(page, 'asdasdadas');
final def result = query.execute()
def buildQuery(page, term) {
    def queryManager = session.workspace.queryManager;
    def statement = 'select * from nt:base where jcr:path like \''+page.path+'/%\' and sling:resourceType = \'' + term + '\'';
    queryManager.createQuery(statement, 'sql');
}
count = 0;
result.nodes.each { node ->
    println node.getPath()
   
   
    if(node.hasProperty('separationMode')){
        updateProperty(node,'separationMode','newProperty')
    }
   
    if(node.hasProperty('compoundMatrix')){
        updateProperty(node,'compoundMatrix','newProperty')
    }
   
    if(node.hasProperty('technique')){
        updateProperty(node,'technique','newProperty')
    }
   
    if(node.hasProperty('instrumentType')){
        updateProperty(node,'instrumentType','newProperty')
    }
   
    if(node.hasProperty('software')){
        updateProperty(node,'software','products')
    }
   
 
}
def updateProperty(node,propertyName,newProperty) {
   
    def valueList = []
   node.get(propertyName).each{ val ->
                def nodeList = val.split("/");
                val.contains('waters:' + propertyName) ? valueList.push('waters:' + newProperty + '/' +nodeList[nodeList.length-1])  : valueList.push(val)

            }
    if(valueList.size > 0){
        println 'prop' + valueList;
        node.set(newProperty, valueList as String[])
                
    }
    node.set(propertyName,null);
    session.save()
    count++;
}
    

println 'Number Of page Found :' + result.nodes.size();
println 'Number of Proprty  Modified:' + count;
